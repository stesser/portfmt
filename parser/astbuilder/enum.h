/*-
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * Copyright (c) 2019 Tobias Kortkamp <tobik@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#pragma once

enum ParserASTBuilderTokenType {
	PARSER_AST_BUILDER_TOKEN_COMMENT,
	PARSER_AST_BUILDER_TOKEN_CONDITIONAL_END,
	PARSER_AST_BUILDER_TOKEN_CONDITIONAL_TOKEN,
	PARSER_AST_BUILDER_TOKEN_CONDITIONAL_START,
	PARSER_AST_BUILDER_TOKEN_TARGET_COMMAND_END,
	PARSER_AST_BUILDER_TOKEN_TARGET_COMMAND_START,
	PARSER_AST_BUILDER_TOKEN_TARGET_COMMAND_TOKEN,
	PARSER_AST_BUILDER_TOKEN_TARGET_END,
	PARSER_AST_BUILDER_TOKEN_TARGET_START,
	PARSER_AST_BUILDER_TOKEN_VARIABLE_END,
	PARSER_AST_BUILDER_TOKEN_VARIABLE_START,
	PARSER_AST_BUILDER_TOKEN_VARIABLE_TOKEN,
};

enum ParserASTBuilderConditionalType {
	PARSER_AST_BUILDER_CONDITIONAL_INVALID,
	PARSER_AST_BUILDER_CONDITIONAL_ELIF,
	PARSER_AST_BUILDER_CONDITIONAL_ELIFDEF,
	PARSER_AST_BUILDER_CONDITIONAL_ELIFMAKE,
	PARSER_AST_BUILDER_CONDITIONAL_ELIFNDEF,
	PARSER_AST_BUILDER_CONDITIONAL_ELSE,
	PARSER_AST_BUILDER_CONDITIONAL_ENDFOR,
	PARSER_AST_BUILDER_CONDITIONAL_ENDIF,
	PARSER_AST_BUILDER_CONDITIONAL_ERROR,
	PARSER_AST_BUILDER_CONDITIONAL_EXPORT_ENV,
	PARSER_AST_BUILDER_CONDITIONAL_EXPORT_LITERAL,
	PARSER_AST_BUILDER_CONDITIONAL_EXPORT,
	PARSER_AST_BUILDER_CONDITIONAL_FOR,
	PARSER_AST_BUILDER_CONDITIONAL_IF,
	PARSER_AST_BUILDER_CONDITIONAL_IFDEF,
	PARSER_AST_BUILDER_CONDITIONAL_IFMAKE,
	PARSER_AST_BUILDER_CONDITIONAL_IFNDEF,
	PARSER_AST_BUILDER_CONDITIONAL_IFNMAKE,
	PARSER_AST_BUILDER_CONDITIONAL_INCLUDE,
	PARSER_AST_BUILDER_CONDITIONAL_INCLUDE_OPTIONAL,
	PARSER_AST_BUILDER_CONDITIONAL_INCLUDE_OPTIONAL_D,
	PARSER_AST_BUILDER_CONDITIONAL_INCLUDE_OPTIONAL_S,
	PARSER_AST_BUILDER_CONDITIONAL_INCLUDE_POSIX,
	PARSER_AST_BUILDER_CONDITIONAL_INCLUDE_POSIX_OPTIONAL,
	PARSER_AST_BUILDER_CONDITIONAL_INCLUDE_POSIX_OPTIONAL_S,
	PARSER_AST_BUILDER_CONDITIONAL_INFO,
	PARSER_AST_BUILDER_CONDITIONAL_UNDEF,
	PARSER_AST_BUILDER_CONDITIONAL_UNEXPORT_ENV,
	PARSER_AST_BUILDER_CONDITIONAL_UNEXPORT,
	PARSER_AST_BUILDER_CONDITIONAL_WARNING,
};

extern const char *ParserASTBuilderTokenType_tostring[];
extern const char *ParserASTBuilderTokenType_humanize[];
extern const char *ParserASTBuilderConditionalType_humanize[];
