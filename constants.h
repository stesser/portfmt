/* Generated by generate_rules.sh; do not edit */
struct ConstantStaticFlavors {
	const char *uses;
	const char *flavor;
};
extern struct ConstantStaticFlavors static_flavors[];
extern size_t static_flavors_len;
extern const char *known_architectures[];
extern size_t known_architectures_len;
extern uint32_t freebsd_versions[];
extern size_t freebsd_versions_len;
extern const char *use_gnome_rel[];
extern const char *use_kde_rel[];
extern const char *use_pyqt_rel[];
extern const char *use_qt_rel[];
extern const char *static_shebang_langs[];
extern size_t use_gnome_rel_len;
extern size_t use_kde_rel_len;
extern size_t use_pyqt_rel_len;
extern size_t use_qt_rel_len;
extern size_t static_shebang_langs_len;
#define VAR_BROKEN_RUBY(block, flags, uses) \
	{ block, "BROKEN_RUBY26", flags, uses }, \
	{ block, "BROKEN_RUBY27", flags, uses }, \
	{ block, "BROKEN_RUBY30", flags, uses }, \
	{ block, "BROKEN_RUBY31", flags, uses }
#define VAR_FOR_EACH_ARCH(block, var, flags, uses) \
	{ block, var "aarch64", flags, uses }, \
	{ block, var "amd64", flags, uses }, \
	{ block, var "arm", flags, uses }, \
	{ block, var "armv6", flags, uses }, \
	{ block, var "armv7", flags, uses }, \
	{ block, var "i386", flags, uses }, \
	{ block, var "mips", flags, uses }, \
	{ block, var "mips64", flags, uses }, \
	{ block, var "mips64el", flags, uses }, \
	{ block, var "mips64elhf", flags, uses }, \
	{ block, var "mips64hf", flags, uses }, \
	{ block, var "mipsel", flags, uses }, \
	{ block, var "mipselhf", flags, uses }, \
	{ block, var "mipshf", flags, uses }, \
	{ block, var "mipsn32", flags, uses }, \
	{ block, var "powerpc", flags, uses }, \
	{ block, var "powerpc64", flags, uses }, \
	{ block, var "powerpc64le", flags, uses }, \
	{ block, var "powerpcspe", flags, uses }, \
	{ block, var "riscv64", flags, uses }, \
	{ block, var "riscv64sf", flags, uses }, \
	{ block, var "sparc64", flags, uses }
#define VAR_FOR_EACH_FREEBSD_VERSION_AND_ARCH(block, var, flags, uses) \
	{ block, var "FreeBSD", flags, uses }, \
	{ block, var "FreeBSD_11", flags, uses }, \
	VAR_FOR_EACH_ARCH(block, var "FreeBSD_11_", flags, uses), \
	{ block, var "FreeBSD_12", flags, uses }, \
	VAR_FOR_EACH_ARCH(block, var "FreeBSD_12_", flags, uses), \
	{ block, var "FreeBSD_13", flags, uses }, \
	VAR_FOR_EACH_ARCH(block, var "FreeBSD_13_", flags, uses), \
	{ block, var "FreeBSD_14", flags, uses }, \
	VAR_FOR_EACH_ARCH(block, var "FreeBSD_14_", flags, uses), \
	VAR_FOR_EACH_ARCH(block, var "FreeBSD_", flags, uses)
#define VAR_FOR_EACH_FREEBSD_VERSION(block, var, flags, uses) \
	{ block, var "FreeBSD", flags, uses }, \
	{ block, var "FreeBSD_11", flags, uses }, \
	{ block, var "FreeBSD_12", flags, uses }, \
	{ block, var "FreeBSD_13", flags, uses }, \
	{ block, var "FreeBSD_14", flags, uses }
#define VAR_FOR_EACH_SSL(block, var, flags, uses) \
	{ block, var "base", flags, uses }, \
	{ block, var "openssl", flags, uses }, \
	{ block, var "libressl", flags, uses }, \
	{ block, var "libressl-devel", flags, uses }
